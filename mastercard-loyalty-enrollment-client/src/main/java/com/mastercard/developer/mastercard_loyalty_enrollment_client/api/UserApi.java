/*
 * User Account Management
 * API interface to enroll users and accounts
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: Loyalty_Technology_Solutions_Scrum_Vulcans@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_enrollment_client.api;

import com.google.gson.reflect.TypeToken;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.Pair;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.PagedResponseUserSearchResponse;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.UserEnrollRequest;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.UserEnrollResponse;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.UserSearchRequest;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.UserSearchResponse;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.UserUpdateRequest;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.UserUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for enrollUser
     * @param userEnrollRequest userEnrollRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollUserCall(UserEnrollRequest userEnrollRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userEnrollRequest;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollUserValidateBeforeCall(UserEnrollRequest userEnrollRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userEnrollRequest' is set
        if (userEnrollRequest == null) {
            throw new ApiException("Missing the required parameter 'userEnrollRequest' when calling enrollUser(Async)");
        }
        

        okhttp3.Call localVarCall = enrollUserCall(userEnrollRequest, _callback);
        return localVarCall;

    }

    /**
     * Enrolls a new user for a company, user may or may not provide other demographic information for enrollment
     * 
     * @param userEnrollRequest userEnrollRequest (required)
     * @return UserEnrollResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UserEnrollResponse enrollUser(UserEnrollRequest userEnrollRequest) throws ApiException {
        ApiResponse<UserEnrollResponse> localVarResp = enrollUserWithHttpInfo(userEnrollRequest);
        return localVarResp.getData();
    }

    /**
     * Enrolls a new user for a company, user may or may not provide other demographic information for enrollment
     * 
     * @param userEnrollRequest userEnrollRequest (required)
     * @return ApiResponse&lt;UserEnrollResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEnrollResponse> enrollUserWithHttpInfo(UserEnrollRequest userEnrollRequest) throws ApiException {
        okhttp3.Call localVarCall = enrollUserValidateBeforeCall(userEnrollRequest, null);
        Type localVarReturnType = new TypeToken<UserEnrollResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enrolls a new user for a company, user may or may not provide other demographic information for enrollment (asynchronously)
     * 
     * @param userEnrollRequest userEnrollRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollUserAsync(UserEnrollRequest userEnrollRequest, final ApiCallback<UserEnrollResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollUserValidateBeforeCall(userEnrollRequest, _callback);
        Type localVarReturnType = new TypeToken<UserEnrollResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findUser
     * @param referenceId Reference Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findUserCall(String referenceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{reference_id}"
            .replaceAll("\\{" + "reference_id" + "\\}", localVarApiClient.escapeString(referenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findUserValidateBeforeCall(String referenceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referenceId' is set
        if (referenceId == null) {
            throw new ApiException("Missing the required parameter 'referenceId' when calling findUser(Async)");
        }
        

        okhttp3.Call localVarCall = findUserCall(referenceId, _callback);
        return localVarCall;

    }

    /**
     * Returns the demographic information related to the existing user
     * 
     * @param referenceId Reference Id (required)
     * @return UserSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UserSearchResponse findUser(String referenceId) throws ApiException {
        ApiResponse<UserSearchResponse> localVarResp = findUserWithHttpInfo(referenceId);
        return localVarResp.getData();
    }

    /**
     * Returns the demographic information related to the existing user
     * 
     * @param referenceId Reference Id (required)
     * @return ApiResponse&lt;UserSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSearchResponse> findUserWithHttpInfo(String referenceId) throws ApiException {
        okhttp3.Call localVarCall = findUserValidateBeforeCall(referenceId, null);
        Type localVarReturnType = new TypeToken<UserSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the demographic information related to the existing user (asynchronously)
     * 
     * @param referenceId Reference Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findUserAsync(String referenceId, final ApiCallback<UserSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = findUserValidateBeforeCall(referenceId, _callback);
        Type localVarReturnType = new TypeToken<UserSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchUser
     * @param userSearchRequest userSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserCall(UserSearchRequest userSearchRequest, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userSearchRequest;

        // create path and map variables
        String localVarPath = "/users/searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserValidateBeforeCall(UserSearchRequest userSearchRequest, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userSearchRequest' is set
        if (userSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'userSearchRequest' when calling searchUser(Async)");
        }
        

        okhttp3.Call localVarCall = searchUserCall(userSearchRequest, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Returns the demographic information related to the existing user information
     * 
     * @param userSearchRequest userSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @return PagedResponseUserSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PagedResponseUserSearchResponse searchUser(UserSearchRequest userSearchRequest, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagedResponseUserSearchResponse> localVarResp = searchUserWithHttpInfo(userSearchRequest, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Returns the demographic information related to the existing user information
     * 
     * @param userSearchRequest userSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @return ApiResponse&lt;PagedResponseUserSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedResponseUserSearchResponse> searchUserWithHttpInfo(UserSearchRequest userSearchRequest, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchUserValidateBeforeCall(userSearchRequest, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagedResponseUserSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the demographic information related to the existing user information (asynchronously)
     * 
     * @param userSearchRequest userSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved User(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserAsync(UserSearchRequest userSearchRequest, Integer limit, Integer offset, final ApiCallback<PagedResponseUserSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUserValidateBeforeCall(userSearchRequest, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagedResponseUserSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param referenceId Reference Id (required)
     * @param userUpdateRequest userUpdateRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String referenceId, UserUpdateRequest userUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userUpdateRequest;

        // create path and map variables
        String localVarPath = "/users/{reference_id}"
            .replaceAll("\\{" + "reference_id" + "\\}", localVarApiClient.escapeString(referenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String referenceId, UserUpdateRequest userUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referenceId' is set
        if (referenceId == null) {
            throw new ApiException("Missing the required parameter 'referenceId' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'userUpdateRequest' is set
        if (userUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'userUpdateRequest' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(referenceId, userUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Updates the demographic information for an existing user of the company
     * 
     * @param referenceId Reference Id (required)
     * @param userUpdateRequest userUpdateRequest (required)
     * @return UserUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public UserUpdateResponse updateUser(String referenceId, UserUpdateRequest userUpdateRequest) throws ApiException {
        ApiResponse<UserUpdateResponse> localVarResp = updateUserWithHttpInfo(referenceId, userUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the demographic information for an existing user of the company
     * 
     * @param referenceId Reference Id (required)
     * @param userUpdateRequest userUpdateRequest (required)
     * @return ApiResponse&lt;UserUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserUpdateResponse> updateUserWithHttpInfo(String referenceId, UserUpdateRequest userUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(referenceId, userUpdateRequest, null);
        Type localVarReturnType = new TypeToken<UserUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the demographic information for an existing user of the company (asynchronously)
     * 
     * @param referenceId Reference Id (required)
     * @param userUpdateRequest userUpdateRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated User </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String referenceId, UserUpdateRequest userUpdateRequest, final ApiCallback<UserUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(referenceId, userUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<UserUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
 * User Account Management
 * API interface to enroll users and accounts
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: Loyalty_Technology_Solutions_Scrum_Vulcans@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mastercard_loyalty_enrollment_client.api;

import com.google.gson.reflect.TypeToken;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiCallback;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiClient;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiException;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.ApiResponse;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.Configuration;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.Pair;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.AccountEnrollRequest;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.AccountResponse;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.AccountSearchRequest;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.AccountSearchResponse;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.AccountUpdateRequest;
import com.mastercard.developer.mastercard_loyalty_enrollment_client.model.PagedResponseAccountSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for enrollAccount
     * @param accountEnrollRequest accountEnrollRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollAccountCall(AccountEnrollRequest accountEnrollRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountEnrollRequest;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollAccountValidateBeforeCall(AccountEnrollRequest accountEnrollRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountEnrollRequest' is set
        if (accountEnrollRequest == null) {
            throw new ApiException("Missing the required parameter 'accountEnrollRequest' when calling enrollAccount(Async)");
        }
        

        okhttp3.Call localVarCall = enrollAccountCall(accountEnrollRequest, _callback);
        return localVarCall;

    }

    /**
     * Enrolls a new account of an user for a company
     * 
     * @param accountEnrollRequest accountEnrollRequest (required)
     * @return AccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AccountResponse enrollAccount(AccountEnrollRequest accountEnrollRequest) throws ApiException {
        ApiResponse<AccountResponse> localVarResp = enrollAccountWithHttpInfo(accountEnrollRequest);
        return localVarResp.getData();
    }

    /**
     * Enrolls a new account of an user for a company
     * 
     * @param accountEnrollRequest accountEnrollRequest (required)
     * @return ApiResponse&lt;AccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResponse> enrollAccountWithHttpInfo(AccountEnrollRequest accountEnrollRequest) throws ApiException {
        okhttp3.Call localVarCall = enrollAccountValidateBeforeCall(accountEnrollRequest, null);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enrolls a new account of an user for a company (asynchronously)
     * 
     * @param accountEnrollRequest accountEnrollRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Enrolled Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollAccountAsync(AccountEnrollRequest accountEnrollRequest, final ApiCallback<AccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollAccountValidateBeforeCall(accountEnrollRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAccount
     * @param referenceId Reference Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAccountCall(String referenceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{reference_id}"
            .replaceAll("\\{" + "reference_id" + "\\}", localVarApiClient.escapeString(referenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAccountValidateBeforeCall(String referenceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referenceId' is set
        if (referenceId == null) {
            throw new ApiException("Missing the required parameter 'referenceId' when calling findAccount(Async)");
        }
        

        okhttp3.Call localVarCall = findAccountCall(referenceId, _callback);
        return localVarCall;

    }

    /**
     * Returns the account information for an account of a company
     * 
     * @param referenceId Reference Id (required)
     * @return AccountSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AccountSearchResponse findAccount(String referenceId) throws ApiException {
        ApiResponse<AccountSearchResponse> localVarResp = findAccountWithHttpInfo(referenceId);
        return localVarResp.getData();
    }

    /**
     * Returns the account information for an account of a company
     * 
     * @param referenceId Reference Id (required)
     * @return ApiResponse&lt;AccountSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSearchResponse> findAccountWithHttpInfo(String referenceId) throws ApiException {
        okhttp3.Call localVarCall = findAccountValidateBeforeCall(referenceId, null);
        Type localVarReturnType = new TypeToken<AccountSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the account information for an account of a company (asynchronously)
     * 
     * @param referenceId Reference Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAccountAsync(String referenceId, final ApiCallback<AccountSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAccountValidateBeforeCall(referenceId, _callback);
        Type localVarReturnType = new TypeToken<AccountSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAccount
     * @param accountSearchRequest accountSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAccountCall(AccountSearchRequest accountSearchRequest, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountSearchRequest;

        // create path and map variables
        String localVarPath = "/accounts/searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAccountValidateBeforeCall(AccountSearchRequest accountSearchRequest, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountSearchRequest' is set
        if (accountSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'accountSearchRequest' when calling searchAccount(Async)");
        }
        

        okhttp3.Call localVarCall = searchAccountCall(accountSearchRequest, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Returns the account information for a company
     * 
     * @param accountSearchRequest accountSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @return PagedResponseAccountSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PagedResponseAccountSearchResponse searchAccount(AccountSearchRequest accountSearchRequest, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagedResponseAccountSearchResponse> localVarResp = searchAccountWithHttpInfo(accountSearchRequest, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Returns the account information for a company
     * 
     * @param accountSearchRequest accountSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @return ApiResponse&lt;PagedResponseAccountSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedResponseAccountSearchResponse> searchAccountWithHttpInfo(AccountSearchRequest accountSearchRequest, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchAccountValidateBeforeCall(accountSearchRequest, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagedResponseAccountSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the account information for a company (asynchronously)
     * 
     * @param accountSearchRequest accountSearchRequest (required)
     * @param limit Number of records per page. (optional)
     * @param offset Result page you want to retrieve (0..N) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved Account(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAccountAsync(AccountSearchRequest accountSearchRequest, Integer limit, Integer offset, final ApiCallback<PagedResponseAccountSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAccountValidateBeforeCall(accountSearchRequest, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagedResponseAccountSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccount
     * @param referenceId Reference Id (required)
     * @param accountUpdateRequest accountUpdateRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountCall(String referenceId, AccountUpdateRequest accountUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountUpdateRequest;

        // create path and map variables
        String localVarPath = "/accounts/{reference_id}"
            .replaceAll("\\{" + "reference_id" + "\\}", localVarApiClient.escapeString(referenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountValidateBeforeCall(String referenceId, AccountUpdateRequest accountUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referenceId' is set
        if (referenceId == null) {
            throw new ApiException("Missing the required parameter 'referenceId' when calling updateAccount(Async)");
        }
        
        // verify the required parameter 'accountUpdateRequest' is set
        if (accountUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'accountUpdateRequest' when calling updateAccount(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccountCall(referenceId, accountUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Updates the status for an account of the company
     * 
     * @param referenceId Reference Id (required)
     * @param accountUpdateRequest accountUpdateRequest (required)
     * @return AccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public AccountResponse updateAccount(String referenceId, AccountUpdateRequest accountUpdateRequest) throws ApiException {
        ApiResponse<AccountResponse> localVarResp = updateAccountWithHttpInfo(referenceId, accountUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the status for an account of the company
     * 
     * @param referenceId Reference Id (required)
     * @param accountUpdateRequest accountUpdateRequest (required)
     * @return ApiResponse&lt;AccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResponse> updateAccountWithHttpInfo(String referenceId, AccountUpdateRequest accountUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(referenceId, accountUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the status for an account of the company (asynchronously)
     * 
     * @param referenceId Reference Id (required)
     * @param accountUpdateRequest accountUpdateRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated Account </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAsync(String referenceId, AccountUpdateRequest accountUpdateRequest, final ApiCallback<AccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(referenceId, accountUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
